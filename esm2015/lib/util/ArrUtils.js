/**
 * Copyright (c) Tiny Technologies, Inc. All rights reserved.
 * Licensed under the LGPL or a commercial license.
 * For LGPL see License.txt in the project root for license information.
 * For commercial licenses see https://www.tiny.cloud/
 */
/**
 * Array utility class.
 *
 * @private
 * @class tinymce.util.Arr
 */
const isArray = Array.isArray;
const toArray = function (obj) {
    let array = obj, i, l;
    if (!isArray(obj)) {
        array = [];
        for (i = 0, l = obj.length; i < l; i++) {
            array[i] = obj[i];
        }
    }
    return array;
};
const ɵ0 = toArray;
const each = function (o, cb, s) {
    let n, l;
    if (!o) {
        return 0;
    }
    s = s || o;
    if (o.length !== undefined) {
        // Indexed arrays, needed for Safari
        for (n = 0, l = o.length; n < l; n++) {
            if (cb.call(s, o[n], n, o) === false) {
                return 0;
            }
        }
    }
    else {
        // Hashtables
        for (n in o) {
            if (o.hasOwnProperty(n)) {
                if (cb.call(s, o[n], n, o) === false) {
                    return 0;
                }
            }
        }
    }
    return 1;
};
const ɵ1 = each;
const map = function (array, callback) {
    const out = [];
    each(array, function (item, index) {
        out.push(callback(item, index, array));
    });
    return out;
};
const ɵ2 = map;
const filter = function (a, f) {
    const o = [];
    each(a, function (v, index) {
        if (!f || f(v, index, a)) {
            o.push(v);
        }
    });
    return o;
};
const ɵ3 = filter;
const indexOf = function (a, v) {
    let i, l;
    if (a) {
        for (i = 0, l = a.length; i < l; i++) {
            if (a[i] === v) {
                return i;
            }
        }
    }
    return -1;
};
const ɵ4 = indexOf;
const reduce = function (collection, iteratee, accumulator, thisArg) {
    let i = 0;
    if (arguments.length < 3) {
        accumulator = collection[0];
    }
    for (; i < collection.length; i++) {
        accumulator = iteratee.call(thisArg, accumulator, collection[i], i);
    }
    return accumulator;
};
const ɵ5 = reduce;
const findIndex = function (array, predicate, thisArg) {
    let i, l;
    for (i = 0, l = array.length; i < l; i++) {
        if (predicate.call(thisArg, array[i], i, array)) {
            return i;
        }
    }
    return -1;
};
const ɵ6 = findIndex;
const find = function (array, predicate, thisArg) {
    const idx = findIndex(array, predicate, thisArg);
    if (idx !== -1) {
        return array[idx];
    }
    return undefined;
};
const ɵ7 = find;
const last = function (collection) {
    return collection[collection.length - 1];
};
const ɵ8 = last;
export default {
    isArray,
    toArray,
    each,
    map,
    filter,
    indexOf,
    reduce,
    findIndex,
    find,
    last
};
export { ɵ0, ɵ1, ɵ2, ɵ3, ɵ4, ɵ5, ɵ6, ɵ7, ɵ8 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXJyVXRpbHMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AcG9scHdhcmUvdGlueW1jZS11dGlsLyIsInNvdXJjZXMiOlsibGliL3V0aWwvQXJyVXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7O0dBS0c7QUFFSDs7Ozs7R0FLRztBQUVILE1BQU0sT0FBTyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUM7QUFFOUIsTUFBTSxPQUFPLEdBQUcsVUFBVSxHQUFHO0lBQzNCLElBQUksS0FBSyxHQUFHLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBRXRCLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUU7UUFDakIsS0FBSyxHQUFHLEVBQUUsQ0FBQztRQUNYLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ3RDLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDbkI7S0FDRjtJQUVELE9BQU8sS0FBSyxDQUFDO0FBQ2YsQ0FBQyxDQUFDOztBQUVGLE1BQU0sSUFBSSxHQUFHLFVBQVUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFFO0lBQzlCLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUVULElBQUksQ0FBQyxDQUFDLEVBQUU7UUFDTixPQUFPLENBQUMsQ0FBQztLQUNWO0lBRUQsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFWCxJQUFJLENBQUMsQ0FBQyxNQUFNLEtBQUssU0FBUyxFQUFFO1FBQzFCLG9DQUFvQztRQUNwQyxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUNwQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FB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LE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEtBQUssQ0FBQyxFQUFFO1lBQy9DLE9BQU8sQ0FBQyxDQUFDO1NBQ1Y7S0FDRjtJQUVELE9BQU8sQ0FBQyxDQUFDLENBQUM7QUFDWixDQUFDLENBQUM7O0FBRUYsTUFBTSxJQUFJLEdBQUcsVUFBVSxLQUFLLEVBQUUsU0FBUyxFQUFFLE9BQVE7SUFDL0MsTUFBTSxHQUFHLEdBQUcsU0FBUyxDQUFDLEtBQUssRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFFakQsSUFBSSxHQUFHLEtBQUssQ0FBQyxDQUFDLEVBQUU7UUFDZCxPQUFPLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztLQUNuQjtJQUVELE9BQU8sU0FBUyxDQUFDO0FBQ25CLENBQUMsQ0FBQzs7QUFFRixNQUFNLElBQUksR0FBRyxVQUFVLFVBQVU7SUFDL0IsT0FBTyxVQUFVLENBQUMsVUFBVSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztBQUMzQyxDQUFDLENBQUM7O0FBRUYsZUFBZTtJQUNiLE9BQU87SUFDUCxPQUFPO0lBQ1AsSUFBSTtJQUNKLEdBQUc7SUFDSCxNQUFNO0lBQ04sT0FBTztJQUNQLE1BQU07SUFDTixTQUFTO0lBQ1QsSUFBSTtJQUNKLElBQUk7Q0FDTCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIFRpbnkgVGVjaG5vbG9naWVzLCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTEdQTCBvciBhIGNvbW1lcmNpYWwgbGljZW5zZS5cbiAqIEZvciBMR1BMIHNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICogRm9yIGNvbW1lcmNpYWwgbGljZW5zZXMgc2VlIGh0dHBzOi8vd3d3LnRpbnkuY2xvdWQvXG4gKi9cblxuLyoqXG4gKiBBcnJheSB1dGlsaXR5IGNsYXNzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY2xhc3MgdGlueW1jZS51dGlsLkFyclxuICovXG5cbmNvbnN0IGlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xuXG5jb25zdCB0b0FycmF5ID0gZnVuY3Rpb24gKG9iaikge1xuICBsZXQgYXJyYXkgPSBvYmosIGksIGw7XG5cbiAgaWYgKCFpc0FycmF5KG9iaikpIHtcbiAgICBhcnJheSA9IFtdO1xuICAgIGZvciAoaSA9IDAsIGwgPSBvYmoubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBhcnJheVtpXSA9IG9ialtpXTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYXJyYXk7XG59O1xuXG5jb25zdCBlYWNoID0gZnVuY3Rpb24gKG8sIGNiLCBzPykge1xuICBsZXQgbiwgbDtcblxuICBpZiAoIW8pIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIHMgPSBzIHx8IG87XG5cbiAgaWYgKG8ubGVuZ3RoICE9PSB1bmRlZmluZWQpIHtcbiAgICAvLyBJbmRleGVkIGFycmF5cywgbmVlZGVkIGZvciBTYWZhcmlcbiAgICBmb3IgKG4gPSAwLCBsID0gby5sZW5ndGg7IG4gPCBsOyBuKyspIHtcbiAgICAgIGlmIChjYi5jYWxsKHMsIG9bbl0sIG4sIG8pID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gSGFzaHRhYmxlc1xuICAgIGZvciAobiBpbiBvKSB7XG4gICAgICBpZiAoby5oYXNPd25Qcm9wZXJ0eShuKSkge1xuICAgICAgICBpZiAoY2IuY2FsbChzLCBvW25dLCBuLCBvKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiAxO1xufTtcblxuY29uc3QgbWFwID0gZnVuY3Rpb24gKGFycmF5LCBjYWxsYmFjaykge1xuICBjb25zdCBvdXQgPSBbXTtcblxuICBlYWNoKGFycmF5LCBmdW5jdGlvbiAoaXRlbSwgaW5kZXgpIHtcbiAgICBvdXQucHVzaChjYWxsYmFjayhpdGVtLCBpbmRleCwgYXJyYXkpKTtcbiAgfSk7XG5cbiAgcmV0dXJuIG91dDtcbn07XG5cbmNvbnN0IGZpbHRlciA9IGZ1bmN0aW9uIChhLCBmPykge1xuICBjb25zdCBvID0gW107XG5cbiAgZWFjaChhLCBmdW5jdGlvbiAodiwgaW5kZXgpIHtcbiAgICBpZiAoIWYgfHwgZih2LCBpbmRleCwgYSkpIHtcbiAgICAgIG8ucHVzaCh2KTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBvO1xufTtcblxuY29uc3QgaW5kZXhPZiA9IGZ1bmN0aW9uIChhLCB2KSB7XG4gIGxldCBpLCBsO1xuXG4gIGlmIChhKSB7XG4gICAgZm9yIChpID0gMCwgbCA9IGEubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBpZiAoYVtpXSA9PT0gdikge1xuICAgICAgICByZXR1cm4gaTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gLTE7XG59O1xuXG5jb25zdCByZWR1Y2UgPSBmdW5jdGlvbiAoY29sbGVjdGlvbiwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yPywgdGhpc0FyZz8pIHtcbiAgbGV0IGkgPSAwO1xuXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMykge1xuICAgIGFjY3VtdWxhdG9yID0gY29sbGVjdGlvblswXTtcbiAgfVxuXG4gIGZvciAoOyBpIDwgY29sbGVjdGlvbi5sZW5ndGg7IGkrKykge1xuICAgIGFjY3VtdWxhdG9yID0gaXRlcmF0ZWUuY2FsbCh0aGlzQXJnLCBhY2N1bXVsYXRvciwgY29sbGVjdGlvbltpXSwgaSk7XG4gIH1cblxuICByZXR1cm4gYWNjdW11bGF0b3I7XG59O1xuXG5jb25zdCBmaW5kSW5kZXggPSBmdW5jdGlvbiAoYXJyYXksIHByZWRpY2F0ZSwgdGhpc0FyZz8pIHtcbiAgbGV0IGksIGw7XG5cbiAgZm9yIChpID0gMCwgbCA9IGFycmF5Lmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGlmIChwcmVkaWNhdGUuY2FsbCh0aGlzQXJnLCBhcnJheVtpXSwgaSwgYXJyYXkpKSB7XG4gICAgICByZXR1cm4gaTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gLTE7XG59O1xuXG5jb25zdCBmaW5kID0gZnVuY3Rpb24gKGFycmF5LCBwcmVkaWNhdGUsIHRoaXNBcmc/KSB7XG4gIGNvbnN0IGlkeCA9IGZpbmRJbmRleChhcnJheSwgcHJlZGljYXRlLCB0aGlzQXJnKTtcblxuICBpZiAoaWR4ICE9PSAtMSkge1xuICAgIHJldHVybiBhcnJheVtpZHhdO1xuICB9XG5cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn07XG5cbmNvbnN0IGxhc3QgPSBmdW5jdGlvbiAoY29sbGVjdGlvbikge1xuICByZXR1cm4gY29sbGVjdGlvbltjb2xsZWN0aW9uLmxlbmd0aCAtIDFdO1xufTtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBpc0FycmF5LFxuICB0b0FycmF5LFxuICBlYWNoLFxuICBtYXAsXG4gIGZpbHRlcixcbiAgaW5kZXhPZixcbiAgcmVkdWNlLFxuICBmaW5kSW5kZXgsXG4gIGZpbmQsXG4gIGxhc3Rcbn07Il19